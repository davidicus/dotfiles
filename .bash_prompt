#!/bin/bash

# bash_prompt

prompt_git() {
    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then
            # ensure index is up to date
            git update-index --really-refresh  -q &>/dev/null

            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi

        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                      git rev-parse --short HEAD 2> /dev/null || \
                      printf "(unknown)")"

        [ -n "$s" ] && s=" [$s]"

        printf "%s" "$1$branchName$s"
    else
        return
    fi
}

set_prompts() {
    # utils
    local bold=""
    local reset=""
    # colors
    local white=""
    local pink=""
    local blue=""
    local lightBlue=""
    local red=""
    local yellow=""
    # user specific colors
    local hostStyle=""
    local userStyle=""

    # check if tput is available else use ANSI codes
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # reset colors
        tput sgr0
        # set variables
        bold=$(tput bold)
        reset=$(tput sgr0)
        white=$(tput setaf 15)
        pink=$(tput setaf 198)
        blue=$(tput setaf 123)
        lightBlue=$(tput setaf 195)
        red=$(tput setaf 197)
        yellow=$(tput setaf 228)

    else
        bold="\e[1m"
        reset="\e[0m"
        white="\e[1;37m"
        pink="\e[38;5;198m"
        blue="\e[38;5;123m"
        lightBlue="\e[38;5;195m"
        red="\e[38;5;197m"
        yellow="\e[38;5;228m"
    fi

    # build the prompt

    # logged in as root
    if [[ "$USER" == "root" ]]; then
        userStyle="\[$bold$red\]"
    else
        userStyle="\[$pink\]"
    fi

    # connected via ssh
    if [[ "$SSH_TTY" ]]; then
        hostStyle="\[$bold$red\]"
    else
        hostStyle="\[$pink\]"
    fi

    # set the terminal title to the current working directory
    PS1="\[\033]0;\w\007\]"
    # newline
    PS1+="\n"
    # username
    PS1+="\[$userStyle\]Davidicus"
    PS1+="\[$reset$white\] at "
    # host
    PS1+="\[$hostStyle\]☠️ "
    PS1+="\[$reset$white\]: "
    # working directory
    PS1+="\[$blue\]\w"
    # git repository details
    PS1+="\$(prompt_git \"$white on $pink\")"
    # newline
    PS1+="\n"
    # $ (and reset color)
    PS1+="\[$reset$white\]\$ \[$reset\]"

    export PS1
}

set_prompts
unset set_prompts
